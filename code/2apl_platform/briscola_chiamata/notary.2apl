BeliefUpdates:
  { true }  SetAssigned(POS, X)  { assigned(POS, X) }			/* Player X assigned at position POS */
  { true }  RemoveAssigned(POS, X) 	{ not assigned(POS, X) }
  { true }  SetDealer(X)  { dealer(X) }
  { not currentturn(_) }  UpdateTurn(X)  { currentturn(X) }
  { currentturn(X) }  RemoveTrun(X)  { not currentturn(X) }
  { true }  PlayerPass(X)  { playerpass(X) }
  { true }  AddCardPlayed(S, R, X) { cardontable(S, R, X) } 		/* Player X has played card of rank R and suit S */
  { true }  AddBriscola(S, R) { briscola(S, R) } 			/* Set the riscola to be a card of rank R and suit S */
  { true }  RemoveCardPlayed(S, R, X) { not cardontable(S, R, X) } 

  { not points(P, X) } AddPoints(P, X) { points(P, X) }
  { points(P, X) } RemovePoints(P, X) { not points(P, X) }
  
Beliefs:
  gatekeeper(gk).		/* we know who the gatekeeper is, for simplicity */
  dealer(d).
  currentturn(0).   /* the first turn is for the agent in postion 0 */
  
  getpoints(jack, X) :- X is 2.
  getpoints(queen, X) :- X is 3.
  getpoints(king, X) :- X is 4.
  getpoints(three, X) :- X is 10.
  getpoints(ace, X) :- X is 11.
  getpoints(Y, X) :- X is 0.

  briscolaPlayed(X) :- cardontable(S, _, X), briscola(S, _).	/* Keep track of who played a briscola */
  
  getwinner(Winner, Suit) :- cardontable(Suit, ace, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, three, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, king, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, queen, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, jack, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, seven, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, six, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, five, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, four, Winner), !.
  getwinner(Winner, Suit) :- cardontable(Suit, two, Winner), !.
  
  major(X, Y) :- X >= Y.
  win(X, P1, [X, P1]).
  win(X, P1, [X, P1|T]) :- win(Y, P2, T), major(P1, P2).
  win(Y, P2, [X, P1|T]) :- win(Y, P2, T), major(P2, P1).
  whowins(X) :- points(P0, S0), points(P1, S1), points(P2, S2), points(P3, S3), points(P4, S4), not P0 = P1, not P1 = P2, not P2 = P3, not P3 = P4, not P0 = P2, not P0 = P3, not P0 = P4, not P1 = P3, not P1 = P4, not P2 = P4, win(X, Y, [P0, S0, P1, S1, P2, S2, P3, S3, P4, S4]).

Plans:
  @cardtable(enterAsNotary())	/* join the game as notary */

PC-rules:
  message(X, inform, _, _, registered(POS, Y)) <- true |
  {
    SetAssigned(POS, Y);	/* update belief about assigned sit */
    AddPoints(Y, 0);
    if B( POS = 4 ) then	/* if we believe we already assigned all the sits, then choose the dealer */
    { 
      /*@cardtable(chooseDealer(), D);*/
      /*SetDealer(D);*/
      send(d, inform, dealer(d))
    }
  }
  
 /**
  * --- BIDDING SCENARIO ---
  */
  message(X, inform, _, _, askfor(Pos)) <- true |
  {
    
    B(assigned(Pos, Y));
    if B( not playerpass(Y) ) then
    {
      send(X, inform, is(Y))
    }
    else
    {
      /*TODO: in general, here we must implement if there is some "jump" and if all them passed, 
      send the bidwinner message to the winner, but for the prototipe, this works. */
      send(X, inform, bidwinner(0))
    }
  }

  message(X, inform, _, _,  pass(Y)) <- true  | 
  {
    PlayerPass(X)
  }

 /**
  * --- DECLARE BRISCOLA SCENARIO ---
  */
  message(X, inform, _, _, declarebriscola(Briscola)) <- true | 
  {
    B( Briscola = [S, R] );
    AddBriscola(S, R);
    B( assigned(Pos, X) );
    if B( Pos = 0 ) then
    {
      B( assigned(1, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(2, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(3, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(4, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    if B( Pos = 1 ) then
    {
      B( assigned(0, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(2, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(3, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(4, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    if B( Pos = 2 ) then
    {
      B( assigned(0, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(1, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(3, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(4, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    if B( Pos = 3 ) then
    {
      B( assigned(0, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(1, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(2, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(4, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    if B( Pos = 4 ) then
    {
      B( assigned(0, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(1, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(2, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(3, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    
    // START THE GAME!!!
    selectturn()
  }
  
 /**
  * --- PLAY SCENARIO ---
  */
  selectturn() <- currentturn(X) | 
  {
    if B( X = 5 ) then
    {
      RemoveTrun(X);
      UpdateTurn(0);
      B( assigned(0, P));
      print("Round over!");
      countpoints()
    }
    else
    {
      B( assigned(X, P));
      send(P, inform, yourturn(X));
      RemoveTrun(X);
      UpdateTurn(X + 1)
    }
  }
  
  event(cardPlayed(S, R, N), cardtable) <- true | 
  {
    //TODO add card played to can count points
    AddCardPlayed(S, R, N);
    selectturn()
  }
  
     // P players, S suits, R ranks, X points, W winner
  countpoints() <- true |
  {      
     B( assigned(0, P0));
     B( cardontable(S0, R0, P0));
     B( getpoints(R0, X0));
     B( assigned(1, P1));
     B( cardontable(S1, R1, P1));
     B( getpoints(R1, X1));
     B( assigned(2, P2));
     B( cardontable(S2, R2, P2));
     B( getpoints(R2, X2));
     B( assigned(3, P3));
     B( cardontable(S3, R3, P3));
     B( getpoints(R3, X3));
     B( assigned(4, P4));
     B( cardontable(S4, R4, P4));
     B( getpoints(R4, X4));

     if B( briscolaPlayed(_)) then
     {
         B( briscola(S,_) and getwinner(W, S))
     }
     else
     {
       B( getwinner(W, S0))
     };
     
     //Send point to the winner
     send(W, inform, yourpoints( X0 + X1 + X2 + X3 + X4));
     //@cardtable(updatePoints(W, X0 + X1 + X2 + X3 + X4));
     B( points(W, POINTS) );
     RemovePoints(W, POINTS);
     AddPoints(W, POINTS + X0 + X1 + X2 + X3 + X4);
     @cardtable(updatePoints(W, POINTS + X0 + X1 + X2 + X3 + X4));
     
     //Clean table
     B( assigned(0, P0));
     B( cardontable(S0, R0, P0));
     RemoveCardPlayed(S0, R0, P0);
     B( assigned(1, P1));
     B( cardontable(S1, R1, P1));
     RemoveCardPlayed(S1, R1, P1);
     B( assigned(2, P2));
     B( cardontable(S2, R2, P2));
     RemoveCardPlayed(S2, R2, P2);
     B( assigned(3, P3));
     B( cardontable(S3, R3, P3));
     RemoveCardPlayed(S3, R3, P3);
     B( assigned(4, P4));
     B( cardontable(S4, R4, P4));
     RemoveCardPlayed(S4, R4, P4);
     
     //New round
     selectturn()
  }
  
  message(X, inform, _, _, doiwin(P)) <- true |
  {
    if B(whowins(X)) then
    {
      send(X, inform, youwin(P))
    }
    else
    {
      send(X, inform, youlose(P))
    }
  }
  
  
