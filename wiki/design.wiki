Notes about desing of 2APL Multiagent System. 

= Work description =

Design your multiagent system using an Agent-oriented methodology (GAIA, Prometheus or any other existing, of your choice). The diagrams of concepts, roles, agents... shoudl 
be part of your documentation. You should also explain in the report your design decisions (e.g why grouping these functionalities or roles in Agent X).

= Introduction =

I propose to use the Prometheus metodology to to de MAS desing. We can find the PDT software here http://www.cs.rmit.edu.au/agents/pdt/pdt.shtml and it is a `*`.jar file.

== System Specification ==

=== High-level description ===

Description of Briscola Chiamata [A_ProblemDescription here].

=== Identify Actor ==

The main (and unique) actor is the Player. The control actions are given by the environment (I mean, the Board). 

=== Scenarios ===

In a high-level description, there are one scenario for each game phase. 

  * Welcome players: Scenario where we must to wait until 5 players join the game and are registered in the system.

  * Begin game: Shuffle the deck, and dealing cards. Moreover, the system needs to chose a dealer.

  * Bidding: Players must bid in order increasing the bid, until all them pass except one. The goals is to do the best bid (according to the cards in the hand) and optionaly, try to win the bid. If all the players pass, the deck has to be shuffled again. The player who won the bid, must declare the Briscola card.

  * Win the Game: Scenario in where the players have to play and try to win the game, doing  the highest score. The teams are unknown to the players until the Briscola card is played. The players have to update their beliefs continuing during each hand, setting if they belongs to the 2-players team or 3-player-team. Of course, cheating is part of the game. Communication (signs) among players is allowed to exchange information about players (e.g. reputation/beliefs) and cards.

  * End of the game: winner team is declared, score is updated and players are invited to leave the board (table/system) if they want.

=== Inputs/outpus (actions/percepts) ===

  * Join the game and wait until it is perceived that there are 5 players at the board
  * If it is perceived to be the card dealer, then start shuffling and dealing cards to the players.
  * When it is perceived that the card dealer has done (by a message?) and it is perceived the turn, then agents start bidding in order.
  * Once it is perceived that the bidding is over (all the players passed except one) and it has been received the message declaring the Briscola card, others have to update their beliefs regarding the Briscola card.
  * Each agent perceives the card thrown on the table from other players and play his card when it believes it is its turn.
  * If it perceives the Briscola card on the table, then it has to update its beliefs regarding the team settings (permanently).
  * If a message from other players is received, then internal beliefs can be updated.
  * If it is perceived the hand is over, then internal beliefs about points have to be updated.
  * If it is perceived the game is over, then it has to be waiting for winner declaration and score updating. Also, the agent can leave the system.

=== System Goals ===
The main goals of the system are to let 5 agents playing Briscola Chiamata and keep track of final scores of every registered agent in the system.
  * Begin Game
    * Wait for 5 players in the system
      * Register join request
      * Inform the players when there are 5 players in the system (further requests will be ignored)
    * Play the game
      * Dealing
        * Decide the dealer
        * Shuffling cards
        * Dealing cards to players
      * Bidding
        * Identify the maximum bid given the current cards
        * Bid when its the turn
      * Identify teams
      * Cheat Opponents
      * Play cards
  * End Game
    * Update the scores table
    * Inform players of their score
    * Let players leave the system

=== Functionalities of the system: Roles and activities ===

== Architectural Design ==