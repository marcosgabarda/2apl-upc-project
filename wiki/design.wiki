Notes about desing of 2APL Multiagent System. 

= Work description =

Design your multiagent system using an Agent-oriented methodology (GAIA, Prometheus or any other existing, of your choice). The diagrams of concepts, roles, agents... shoudl 
be part of your documentation. You should also explain in the report your design decisions (e.g why grouping these functionalities or roles in Agent X).

= Introduction =

The Prometheus Design Tool is a graphical editor which supports the design tasks specified within the Prometheus methodology for designing agent systems. The Prometheus methodology involves 3 phases: System Specification, High-level (Architectural) Design and Detailed Design.

The PDT software can be downloaded from [http://www.cs.rmit.edu.au/agents/pdt/pdt.shtml here]. To launch it: java -jar PDT_3_3.jar

Description of problem can be found [A_ProblemDescription here].

== System Specification ==

In this phase, actors (human or software) expected to interact with the system, are identified, along with the interface to the system in terms of actions and percepts; system goals are elaborated, and scenarios described in terms of sequences of steps are developed. Roles encompassing small chunks of functionality (identified by goals, percepts and actions) are described and captured.

=== Analisys Overview diagram ===

  * Specify key external actors that will use the system, and key scenarios they will be involved in.
  * Link the actors to the scenarios they are involved in, using percepts and actions. Percepts are signals from actor to system. Actions are responses from the system, possibly directed towards a particular actor. This diagram can be used very freely to sketch a design of the system.

==== Actors ====

  * Player
  * Card Dealer

==== Inputs/outpus (actions/percepts) ====

  * Join the game and wait until it is perceived that there are 5 players at the board
  * If it is perceived to be the card dealer, then start shuffling and dealing cards to the players.
  * When it is perceived that the card dealer has done (by a message?) and it is perceived the turn, then agents start bidding in order.
  * Once it is perceived that the bidding is over (all the players passed except one) and it has been received the message declaring the Briscola card, others have to update their beliefs regarding the Briscola card.
  * Each agent perceives the card thrown on the table from other players and play his card when it believes it is its turn.
  * If it perceives the Briscola card on the table, then it has to update its beliefs regarding the team settings (permanently).
  * If a message from other players is received, then internal beliefs can be updated.
  * If it is perceived the hand is over, then internal beliefs about points have to be updated.
  * If it is perceived the game is over, then it has to be waiting for winner declaration and score updating. Also, the agent can leave the system.

==== Scenarios ====

In a high-level description, there are one scenario for each game phase. 

  # Start the game scenario: Scenario where we must to wait until 5 players join the game and are registered in the system.
  # Dealing scenario: Shuffle the deck, and dealing cards. Moreover, the system needs to chose a dealer.
  # Bidding scenario: Players must bid in order increasing the bid, until all them pass except one. The goals is to do the best bid (according to the cards in the hand) and optionaly, try to win the bid. If all the players pass, the deck has to be shuffled again. The player who won the bid, must declare the Briscola card.
  # Play the Game scenario: Scenario in where the players have to play and try to win the game, doing  the highest score. The teams are unknown to the players until the Briscola card is played. The players have to update their beliefs continuing during each hand, setting if they belongs to the 2-players team or 3-player-team. Of course, cheating is part of the game. Communication (signs) among players is allowed to exchange information about players (e.g. reputation/beliefs) and cards.
  # End the game scenario: winner team is declared, score is updated and players are invited to leave the board (table/system) if they want.

=== Scenarios Diagram ===

A scenarios diagram represents the different scenarios that can exist in the system.

  # Start the game scenario
    # Register players up to five and inform them to wait 
    # When the are 5 players registered, inform them and let the game begin
    # Queue other arriving agents
  # Dealing scenario
    # Choose the card dealer
    # Shuffle the deck
    # Deal cards
  # Bidding scenario
    # Start bidding in turn until the highest bid is established
    # Declare the Briscola card
  # Play the Game scenario
    # Play cards in turn
    # Collect points for each hand
  # End the Game scenario
    # Count points
    # Declare the winner
    # Leave the agents go and let other agent in queue to enter



=== Goals Overview Diagram ===

The goal overview diagram is a directed acyclic graph of all goals in the system.                                           Sub-goals can be generated by asking "how will the system accomplish this goal" Parent goals can be generated by asking "why does the system accomplish this goal".

  * Start the game
      * Register join request and wait for 5 players in the system
      * Inform the players when there are 5 players in the system (further requests will be ignored)
  * Play the game
    * Dealing
      * Decide the dealer
      * Shuffling cards
      * Dealing cards to players
    * Bidding
      * Identify the maximum bid given the current cards
      * Bid when its the turn
    * Identify teams
    * Cheat Opponents
    * Play cards
  * End the Game
    * Update the scores table
    * Inform players of their score
    * Let players leave the system

=== System Roles Diagram ===

In a system roles diagram, we group different goals, percepts and actions under roles.
This helps in further modularizing the system. The input is represented as a percept
and the output as an action.


== High-level (Architectural) Design ==

In this phase, the agent types that will exist in the system are defined by combining roles, the overall structure of the system is described using a system overview diagram, and interaction protocols are used to capture the dynamics of the system in terms of legal message sequences.

=== Data Coupling Diagram ===

The roles that were formed in the last step of the previous phase are linked to data that
has been identified as necessary for performing that role. In the data-coupling diagram you can see all roles and data types in the system.

=== Agent-Role Grouping Diagram ===

In this diagram we group the roles into agent types. Decisions regarding how to group
depend on role similarity, as well as analysis of data usage. The agent-role coupling diagram shows the group of roles that come under an agent. 

=== Agent Acquaintance Diagram ===

In the agent acquaintance diagram you can see all agents within the system and which
agents interact

=== System Overview Diagram ===

In the system overview diagram you can see all agents in the system, along with their
interface and interactions. This diagram is the central diagram of the entire system design. 

== Detailed design ==

In this phase, the internals of each agent are developed in terms of capabilities, events, plans and data. Detailed Design is done at the level of individual agents. 

=== Agent Overview Diagram ===

The agent overview diagram shows the internals of an agent. There is one agent overview diagram for every agent in the system. In the detailed design, much finer details of the system are established. The messages used to communicate between the agents are decided upon. If the roles within an agent grow very large, they are grouped into capabilities. As in the system overview diagram entities can be inserted or removed and edges can be reated or deleted.

=== Capability Overview Diagram ===

In the capability overview diagram you can see the direct internal of a capability. This diagram allows you to specify the internals of a capability in terms of plans, or sub-capabilities and messages between them. Data internal to the capability can also be specified. 
