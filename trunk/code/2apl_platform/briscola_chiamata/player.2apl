BeliefUpdates:
  { true }  SetAssigned(POS, X)     { assigned(POS, X) }
  { true }  RemoveAssigned(POS, X)  { not assigned(POS, X) }
  { true }  AddBidHistorical(Cantity, Who)  { bidhistorical(Cantity, Who) }
  { true }  SetAsDealer(X)  { dealer(X) }
  { true }  SetHand(X)  { hand(X) }
  { hand(X) }  RemoveHand(X)  { not hand(X) }
  { not lastbid(X) } AddLastBid(X) { lastbid(X) }
  { lastbid(X) } RemoveLastBid(X) { not lastbid(X) }
  
  { true }  AddTeamMember(X) { team(X) }
  
Beliefs:
  notary(n).
  gatekeeper(gk).
  dealer(d).
  player(X) :- assigned(POS, X).
  
  getcard([], 0, []).
  getcard([X], 0, []).
  getcard([ S, R | REST ], 0, [S, R]).
  getcard([ S, R | REST ], I, X) :- Y is I - 1, getcard(REST, Y, X).
  
  iscard([], []).
  iscard([Card1, Card2 | REST ], [Card1, Card2]).
  iscard([ X, Y | REST ], Q) :- iscard(REST, Q).
  
  deletehandcard(R, S, [R, S|T], T).
  deletehandcard(R, S, [X, Y|T], [H|T1]):- deletehandcard(R, S, T, T1).

  getpoints(jack, X) :- X is 2.
  getpoints(queen, X) :- X is 3.
  getpoints(king, X) :- X is 4.
  getpoints(three, X) :- X is 10.
  getpoints(ace, X) :- X is 11.
  getpoints(Y, X) :- X is 0.

Plans:
  [ B(gatekeeper(X)) ; send(X, request, register(me)) ]

PC-rules:

 /**
  *  --- JOIN THE GAME SCENARIO ---
  */
  message(X, inform, _, _, registered(POS, Y)) <- true |
  {
    SetAssigned(POS, Y)
  }
  message(X, inform, _, _, refused(Y)) <- true |
  {
    print("I'm out!")
  }

 /**
  *  --- DEAL SCENARIO ---
  */
 message(X, inform, _, _, givecards(Hand)) <- true |
  {
    print ("I've cards!");
    SetHand(Hand)
  }
  
 /**
  * --- BIDDING SCENARIO ---
  */
  message(X, inform, _, _,  firstbid(Y)) <- true | /* message from dealer, telling that this agent is the firts to bid */
  {
    print("I'm the first bidding!");
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
    
  }
  
  message(X, inform, _, _,  bid(Cuantity, PosSender)) <- not bidhistorical(_, _)  | 
  {
    AddBidHistorical(Cuantity, X);
    AddLastBid(Cuantity);
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
  }
  message(X, inform, _, _,  pass(Cuantity)) <- not bidhistorical(_, _)  | 
  {
    AddBidHistorical(Cuantity, X);
    AddLastBid(Cuantity);
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
  }
  
    message(X, inform, _, _,  bid(Cuantity, PosSender)) <- bidhistorical(_, _) | 
  {
    AddBidHistorical(Cuantity, X);
    B( lastbid(LB) );
    RemoveLastBid(LB);
    AddLastBid(Cuantity);
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
  }
  message(X, inform, _, _,  pass(Cuantity)) <- bidhistorical(_, _) | 
  {
    AddBidHistorical(Cuantity, X);
    B( lastbid(LB) );
    RemoveLastBid(LB);
    AddLastBid(Cuantity);
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
  }
  
  message(X, inform, _, _, is(Next)) <- not bidhistorical(_, _) | 
  {
    B( assigned(Pos, Me) );
    print("I bid!");
    AddBidHistorical(61, Me);
    AddLastBid(61);
    @cardtable(updateBid(61));
    send(Next, inform, bid(61, Pos))
  }
  
  message(X, inform, _, _, is(Next)) <- bidhistorical(_, _) | 
  {
    B( assigned(Pos, Me) );
    B( lastbid(LB) );
    if B( bidhistorical(_, Me) ) then
    {
      print("I pass...");
      send(Next, inform, pass(LB));
      send(n, inform, pass(LB))
    }
    else
    {
      print("I bid!");
      AddBidHistorical(LB + 1, Me);
      @cardtable(updateBid(LB + 1));
      send(Next, inform, bid(LB + 1, Pos));
      RemoveLastBid(LB);
      AddLastBid(LB + 1)
    }
    
  }
  
  
 /**
  * --- DECLARE BRISCOLA SCENARIO ---
  */
  message(X, inform, _, _, bidwinner(Y)) <- hand(H) | 
  {
    print("I've the Briscola!");
    // --- Declare Briscola
    //B( getcard(H, 3, Briscola) ); FIXME this line do not work
    send(n, inform, declarebriscola([clubs, ace]));
    if B( iscard(H, [clubs, ace]) ) then
    {
      print("I go alone!");
      AddTeamMember(alone) // The player goes alone
    }
  }

  message(X, inform, _, _, declarebriscola(Briscola, Y)) <- hand(H) |
  {
   // Update knowledge about the team
   if B( iscard(H, Briscola) ) then
   {
     print("I go with bid winner!");
     AddTeamMember(Y)
   }
  }
  
 /**
  * --- PLAY SCENARIO ---
  */
  message(n, inform, _, _, yourturn(Y)) <-  hand(H) and not H = [] |   
  {
    print("My turn!");
    B( getcard(H, 0, X ) ); //TODO Get a ramdom card.
    B( X = [S, R] );
    @cardtable(playCard(S, R));
    
    // Update hand
    B( deletehandcard(S, R, H, RES ) );
    RemoveHand(H);
    SetHand(RES);
    
    // Check if hand is ended
    if B(RES = []) then
    {
      endround()
    }
  }
  
  message(n, inform, _, _, yourscore(Y)) <-  true | 
  {
    skip
  }
  
  endround() <- hand([]) | 
  {
    print("I finish my hand!")
  }
  
  