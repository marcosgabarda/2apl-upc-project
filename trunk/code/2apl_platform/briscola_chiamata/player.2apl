BeliefUpdates:
  { true }  SetAssigned(POS, X)     { assigned(POS, X) }
  { true }  RemoveAssigned(POS, X)  { not assigned(POS, X) }
  { true }  AddBidHistorical(Cantity, Who)  { bidhistorical(Cantity, Who) }
  { true }  SetAsDealer(X)  { dealer(X) }
  { true }  SetHand(X)  { hand(X) }
  { hand(X) }  RemoveHand(X)  { not hand(X) }
  { not lastbid(X) } AddLastBid(X) { lastbid(X) }
  { lastbid(X) } RemoveLastBid(X) { not lastbid(X) }
  { not points(X) } SetPoints(X) { points(X) }
  { points(X) } RemovePoints(X) { not points(X) }
  { true }  SetPartner(X) { partner(X) }
  { true } SetBriscola(S,R) { briscola(S,R) }
 
Beliefs:
  notary(n).
  gatekeeper(gk).
  dealer(d).
  
  getfirstcard([], 0, []).
  getfirstcard([X], 0, []).
  getfirstcard([ S, R | REST ], 0, [S, R]).
  getfirstcard([ S, R | REST ], I, X) :- Y is I - 1, getfirstcard(REST, Y, X).
  
  hascard([], []).
  hascard([Card1, Card2 | REST ], [Card1, Card2]).
  hascard([ X, Y | REST ], Q) :- hascard(REST, Q).
  
  deletehandcard(R, S, [R, S|T], T).
  deletehandcard(R, S, [X, Y|T], [X, Y|T1]):- deletehandcard(R, S, T, T1).

  points(0).
  
  getpoints(jack, X) :- X is 2.
  getpoints(queen, X) :- X is 3.
  getpoints(king, X) :- X is 4.
  getpoints(three, X) :- X is 10.
  getpoints(ace, X) :- X is 11.
  getpoints(Y, X) :- X is 0.

Plans:
  [ B(gatekeeper(X)) ; send(X, request, register(me)) ]

PC-rules:

 /**
  *  --- JOIN THE GAME SCENARIO ---
  */
  message(X, inform, _, _, registered(POS, Y)) <- true |
  {
    SetAssigned(POS, Y)
  }
  message(X, inform, _, _, refused(Y)) <- true |
  {
    print("I'm out!")
  }

 /**
  *  --- DEAL SCENARIO ---
  */
 message(X, inform, _, _, givecards(Hand)) <- true |
  {
    print ("I've cards!");
    SetHand(Hand)
  }
  
 /**
  * --- BIDDING SCENARIO ---
  */
  message(X, inform, _, _,  firstbid(Y)) <- true | /* message from dealer, telling that this agent is the firts to bid */
  {
    print("I'm the first bidding!");
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
    
  }
  
  message(X, inform, _, _,  bid(Cuantity, PosSender)) <- not bidhistorical(_, _)  | 
  {
    AddBidHistorical(Cuantity, X);
    AddLastBid(Cuantity);
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
  }
  message(X, inform, _, _,  pass(Cuantity)) <- not bidhistorical(_, _)  | 
  {
    AddBidHistorical(Cuantity, X);
    AddLastBid(Cuantity);
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
  }
  
    message(X, inform, _, _,  bid(Cuantity, PosSender)) <- bidhistorical(_, _) | 
  {
    AddBidHistorical(Cuantity, X);
    B( lastbid(LB) );
    RemoveLastBid(LB);
    AddLastBid(Cuantity);
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
  }
  message(X, inform, _, _,  pass(Cuantity)) <- bidhistorical(_, _) | 
  {
    AddBidHistorical(Cuantity, X);
    B( lastbid(LB) );
    RemoveLastBid(LB);
    AddLastBid(Cuantity);
    if B( assigned(Pos, _) and Pos < 4) then
    {
      send(n, inform, askfor(Pos + 1))
    }
    else
    {
      send(n, inform, askfor(0))
    }
  }
  
  message(X, inform, _, _, is(Next)) <- not bidhistorical(_, _) | 
  {
    B( assigned(Pos, Me) );
    print("I bid!");
    AddBidHistorical(61, Me);
    AddLastBid(61);
    @cardtable(updateBid(61));
    send(Next, inform, bid(61, Pos))
  }
  
  message(X, inform, _, _, is(Next)) <- bidhistorical(_, _) | 
  {
    B( assigned(Pos, Me) );
    B( lastbid(LB) );
    if B( bidhistorical(_, Me) ) then
    {
      print("I pass...");
      send(Next, inform, pass(LB));
      send(n, inform, pass(LB))
    }
    else
    {
      print("I bid!");
      AddBidHistorical(LB + 1, Me);
      @cardtable(updateBid(LB + 1));
      send(Next, inform, bid(LB + 1, Pos));
      RemoveLastBid(LB);
      AddLastBid(LB + 1)
    }
    
  }
  
  
 /**
  * --- DECLARE BRISCOLA SCENARIO ---
  */
  message(X, inform, _, _, bidwinner(Y)) <- hand(H) | 
  {
    print("I've the Briscola!");
    //TODO: The knowledge of a general deck must be included into NPC belief base to be able to
    //chose a random card of the deck
    send(d, inform, askforacard(0))    
  }

  message(d, inform, _, _, acard(X)) <- true |
  {
    B(X = [S, R]);
    // --- Declare Briscola
    send(n, inform, declarebriscola([S, R]));
    @cardtable(briscolaDeclared(S, R));
    if B( hascard(H, [S, R]) ) then
    {
      print("I go alone!");
      SetPartner(me) // The player goes alone
    }
  }
  
  message(X, inform, _, _, declarebriscola(Briscola, Y)) <- hand(H) |
  {
   B(Briscola = [S,R]);
   SetBriscola(S, R);
   // Update knowledge about the team
   if B( hascard(H, Briscola) ) then
   {
     print("is the parter of the declarer");
     SetPartner(Y)
   }
  }
  
 /**
  * --- PLAY SCENARIO ---
  */
  message(n, inform, _, _, yourturn(Y)) <-  hand(H) and not H = [] |   
  {

    print("My turn as default!");
    B( getfirstcard(H, 0, X ) ); 
    B( X = [S, R] );
    @cardtable(playCard(S, R));
    
    // Update hand
    B( deletehandcard(S, R, H, RES ) );
    RemoveHand(H);
    SetHand(RES)
  }
  
  message(n, inform, _, _, yourpoints(Y)) <-  true | 
  {
    print("I received the points");
    B( points(P) );
    RemovePoints(P);
    SetPoints(P + Y)
  }
  
  message(n, inform, _, _, gameisover(X)) <- hand([]) |
  {
    RemoveHand([]);
    B( points(P) );
    send(n, inform, doiwin(P))
  }
  
  /**
   * The updateScore external actions have to be moved into the notary agent.
   * They are defined here for semplicity, at the moment.
   */
  message(n, inform, _, _, youwin(Y)) <- briscola(_) |
  {
    B( assigned(Pos, Me) );
    @cardtable(updateScore(Me, 2))
  }
  
  message(n, inform, _, _, youwin(Y)) <- not briscola(_) |
  {
    B( assigned(Pos, Me) );
    @cardtable(updateScore(Me, 1))
  }
  
  message(n, inform, _, _, youlose(Y)) <- briscola(_) |
  {
    B( assigned(Pos, Me) );
    @cardtable(updateScore(Me, -2))
  }
  
  message(n, inform, _, _, youlose(Y)) <- not briscola(_) |
  {
    B( assigned(Pos, Me) );
    @cardtable(updateScore(Me, -1))
  }
