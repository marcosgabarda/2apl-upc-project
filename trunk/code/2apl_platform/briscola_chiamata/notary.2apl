BeliefUpdates:
  { true }  SetAssigned(POS, X)  { assigned(POS, X) }
  { true }  RemoveAssigned(POS, X) 	{ not assigned(POS, X) }
  { true }  SetDealer(X)  { dealer(X) }
  { not currentturn(_) }  UpdateTrun(X)  { currentturn(X) }
  { currentturn(X) }  RemoveTrun(X)  { not currentturn(X) }
  { true } PlayerPass(X)  { playerpass(X) }

Beliefs:
  gatekeeper(gk).		/* we know who the gatekeeper is, for simplicity */
  dealer(d).
  currentturn(0).   /* the first turn is for the agent in postion 0 */
  
  

Plans:
  @cardtable(enterAsNotary())	/* join the game as notary */

PC-rules:
  message(X, inform, _, _, registered(POS, Y)) <- true |
  {
    SetAssigned(POS, Y);	/* update belief about assigned sit */
    if B( POS = 4 ) then	/* if we believe we already assigned all the sits, then choose the dealer */
    { 
      /*@cardtable(chooseDealer(), D);*/
      /*SetDealer(D);*/
      send(d, inform, dealer(d))
    }
  }
  
 /**
  * --- BIDDING SCENARIO ---
  */
  message(X, inform, _, _, askfor(Pos)) <- true |
  {
    
    B(assigned(Pos, Y));
    if B( not playerpass(Y) ) then
    {
      send(X, inform, is(Y))
    }
    else
    {
      /*TODO: in general, here we must implement if there is some "jump" and if all them passed, 
      send the bidwinner message to the winner, but for the prototipe, this works. */
      send(X, inform, bidwinner(0))
    }
  }

  message(X, inform, _, _,  pass(Y)) <- true  | 
  {
    PlayerPass(X)
  }

 /**
  * --- DECLARE BRISCOLA SCENARIO ---
  */
  message(X, inform, _, _, declarebriscola(Briscola)) <- true | 
  {
    B( assigned(Pos, X) );
    if B( Pos = 0 ) then
    {
      B( assigned(1, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(2, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(3, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(4, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    if B( Pos = 1 ) then
    {
      B( assigned(0, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(2, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(3, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(4, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    if B( Pos = 2 ) then
    {
      B( assigned(0, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(1, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(3, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(4, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    if B( Pos = 3 ) then
    {
      B( assigned(0, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(1, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(2, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(4, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    if B( Pos = 4 ) then
    {
      B( assigned(0, P1));
      send(P1, inform, declarebriscola(Briscola, X));
      B( assigned(1, P2));
      send(P2, inform, declarebriscola(Briscola, X));
      B( assigned(2, P3));
      send(P3, inform, declarebriscola(Briscola, X));
      B( assigned(3, P4));
      send(P4, inform, declarebriscola(Briscola, X))
    };
    
    // START THE GAME!!!
    selectturn()
  }
  
 /**
  * --- PLAY SCENARIO ---
  */
  selectturn() <- currentturn(X) | 
  {
    if B( X = 4 ) then
    {
      RemoveTrun(X);
      UpdateTrun(0);
      B( assigned(0, P));
      send(P, inform, yourturn(0))
    }
    else
    {
      RemoveTrun(X);
      UpdateTrun(X + 1);
      B( assigned(X + 1, P));
      send(P, inform, yourturn(X + 1))
    }
  }
  
  event(cardPlayed(S, R), cardtable) <- true | 
  {
    selectturn()
  }